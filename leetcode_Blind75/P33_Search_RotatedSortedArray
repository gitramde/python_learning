# Suppose an array sorted in ascending order is rotated at some pivot
# unknown to you beforehand
# i.e [0, 1, 2, 4, 5, 6, 7] becomes [4, 5, 6, 7, 0, 1, 2]
# You are given a target value to search.
#   - If found in the array return its index, otherwise return -1.
# NO DUPLICATES in the array
# Algorithms runtime complexity must be O(LOG N).

# EXample 1
# nums = [4, 5, 6, 7, 0, 1, 2], target = 0
# output = 4
# If target = 3 then output = -1

# NOTES:
# When you are looking for a O(log n) type of solution, it is typically
# binary search type.
#
from typing import List


def search_rotated_sorted(nums: List[int], target: int) -> int:
    l, r = 0, len(nums) - 1
    mid = l + r // 2
    if nums[mid] < target:
        l = mid + 1
    elif nums[mid] > target:
        r = mid + 1
    else:
        return nums[mid]
    return -1


if __name__ == "__main__":
    print(search_rotated_sorted([4, 5, 6, 7, 0, 1, 2], 0))
